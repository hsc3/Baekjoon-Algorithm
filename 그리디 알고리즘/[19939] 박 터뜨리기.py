# [19939] 박 터뜨리기 | Silver 5 | 그리디 알고리즘, 수학
'''
K개의 팀이 박 터트리기 게임을 한다. 우리는 게임을 준비하기 위해서, N개의 공을 K개의 바구니에 나눠 담아야 한다.
공을 바구니에 나눠 담기 위한 규칙을 정리하면 다음과 같다.
- N개의 공을 K개의 바구니에 빠짐없이 나누어 담는다.
- 각 바구니에는 1개 이상의 공이 들어 있어야 한다.
- 각 바구니에 담긴 공의 개수는 모두 달라야 한다.
- 가장 많이 담긴 바구니와 가장 적게 담긴 바구니의 공의 개수 차이가 최소가 되어야 한다.
위의 규칙을 모두 만족하며 N개의 공을 K개의 바구니에 나눠 담을 때, 나눠 담을 수 있는지 여부를 결정하고 (나눠 담을 수 없는 경우에는 -1을 출력한다),
담을 수 있는 경우에는 가장 많이 담긴 바구니와 가장 적게 담긴 바구니의 공의 개수 차이를 계산해서 출력하는 프로그램을 작성하시오.
'''
import sys
input = sys.stdin.readline

N, K = map(int, input().split()) # 공의 수, 팀의 수
ball = (K * (K+1)) // 2 # K = 4 -> [4, 3, 2, 1] 최소로 담을 수 있는 공 개수
if N < ball:
    print(-1)
elif (N - ball) % K == 0:
    print(K-1)
else:
    print(K)

# N, K = map(int, input().split()) # 공의 수, 팀의 수
# basket = [i for i in range(K, 0, -1)] # 처음에 바구니에 들어있는 공의 수
# remainBall = N - sum(basket) # 처음에 나눠준 것을 제외하고 남은 공의 수
# if remainBall < 0: # 나눠 담을 수 없는 경우
#     print(-1)
# else:
#     i = 0 # 공을 추가할 바구니의 인덱스
#     while remainBall != 0: # 잔여 공이 있을때까지 각 바구니에 공을 담는다.
#         basket[i] += 1
#         remainBall -= 1
#         i += 1
#         if i == K:
#             i = 0
#
#     print(basket[0] - basket[-1])




